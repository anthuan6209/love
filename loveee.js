// ============== C·∫•u h√¨nh ==============
const CONFIG = {
  title: "G·ª≠i em b√© ƒë√°ng y√™u c·ªßa anh üíå",
  messages: [
    "Anh y√™u em r·∫•t nhi·ªÅu!",
    "Em l√† ng∆∞·ªùi ƒë·∫∑c bi·ªát nh·∫•t v·ªõi anh ‚ù§Ô∏è",
    "M·ªói ng√†y b√™n em l√† m·ªôt m√≥n qu√† ng·ªçt ng√†o",
    "D√π em c√≥ d·ªÖ th∆∞∆°ng, kh√≥ chi·ªÅu hay h∆°i b∆∞·ªõng...",
    "Th√¨ anh v·∫´n lu√¥n th∆∞∆°ng em nh·∫•t! ü•∞",
    "Em l√† m·∫∑t tr·ªùi c·ªßa ƒë·ªùi anh üåû",
    "Anh mu·ªën c√πng em ƒëi ƒë·∫øn cu·ªëi con ƒë∆∞·ªùng",
    "T√¨nh y√™u c·ªßa anh d√†nh cho em l√† v√¥ ƒëi·ªÅu ki·ªán",
    "Em l√†m cu·ªôc s·ªëng c·ªßa anh tr·ªçn v·∫πn h∆°n",
    "Anh s·∫Ω lu√¥n ·ªü b√™n em, d√π b·∫•t c·ª© chuy·ªán g√¨ x·∫£y ra",
    "N·ª• c∆∞·ªùi c·ªßa em l√† ƒë·ªông l·ª±c c·ªßa anh",
    "Anh kh√¥ng th·ªÉ t∆∞·ªüng t∆∞·ª£ng cu·ªôc s·ªëng thi·∫øu em",
    "Em l√† ƒëi·ªÅu tuy·ªát v·ªùi nh·∫•t t·ª´ng x·∫£y ƒë·∫øn v·ªõi anh üíï"
  ],
  colors: {
    primary: "#ff66a3",
    secondary: "#ff4d88",
    text: "#555",
    background1: "#ffe6f0",
    background2: "#ffe0f7"
  },
  timings: {
    messageChange: 3000,
    heartAnimation: 1.2,
    floatAnimation: [2, 5]
  }
};

// ============== Kh·ªüi t·∫°o ==============
document.head.innerHTML = `
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>G·ª≠i em üíñ</title>
`;

// Th√™m CSS
const style = document.createElement('style');
style.textContent = `
  body {
    background: linear-gradient(135deg, ${CONFIG.colors.background1}, ${CONFIG.colors.background2});
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
    overflow: hidden;
  }
  .card {
    background: white;
    padding: 30px;
    border-radius: 20px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    max-width: 400px;
    text-align: center;
    animation: fadeIn 1s ease;
    position: relative;
    overflow: hidden;
  }
  h1 {
    color: ${CONFIG.colors.primary};
    font-size: 28px;
    margin-bottom: 20px;
  }
  .message-container {
    height: 300px;
    position: relative;
  }
  .message {
    position: absolute;
    width: 100%;
    color: ${CONFIG.colors.text};
    font-size: 18px;
    line-height: 1.6;
    opacity: 0;
    transition: all 1s ease;
    transform: translateY(20px);
  }
  .message.active {
    opacity: 1;
    transform: translateY(0);
  }
  .heart {
    font-size: 32px;
    animation: pulse ${CONFIG.timings.heartAnimation}s infinite;
    color: ${CONFIG.colors.secondary};
    margin-top: 20px;
  }
  .floating-hearts {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    pointer-events: none;
  }
  .floating-heart {
    position: absolute;
    font-size: 20px;
    color: ${CONFIG.colors.secondary};
    animation: float linear;
    pointer-events: none;
  }
  @keyframes fadeIn {
    from {opacity: 0; transform: translateY(20px);}
to {opacity: 1; transform: translateY(0);}
  }
  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.2); }
  }
  @keyframes float {
    to {
      transform: translateY(-100vh) rotate(360deg);
      opacity: 0;
    }
  }
`;
document.head.appendChild(style);

// ============== T·∫°o giao di·ªán ==============
const body = document.body;
const card = document.createElement('div');
card.className = 'card';

card.innerHTML = `
  <h1>${CONFIG.title}</h1>
  <div class="message-container"></div>
  <div class="heart">‚ù§</div>
  <div class="floating-hearts"></div>
`;

body.appendChild(card);

// Th√™m DOCTYPE
const docType = document.implementation.createDocumentType('html', '', '');
document.insertBefore(docType, document.firstChild);

// ============== X·ª≠ l√Ω logic ==============
const messageContainer = document.querySelector('.message-container');
const floatingHearts = document.querySelector('.floating-hearts');

// T·∫°o c√°c message
CONFIG.messages.forEach((msg) => {
  const messageElement = document.createElement('p');
  messageElement.className = 'message';
  messageElement.textContent = msg;
  messageContainer.appendChild(messageElement);
});

// Hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªïi message
let currentIndex = 0;
const allMessages = document.querySelectorAll('.message');

function showNextMessage() {
  allMessages.forEach(msg => msg.classList.remove('active'));
  allMessages[currentIndex].classList.add('active');
  currentIndex = (currentIndex + 1) % CONFIG.messages.length;
  createFloatingHeart();
}

// T·∫°o tr√°i tim bay
function createFloatingHeart() {
  const heart = document.createElement('div');
  heart.className = 'floating-heart';
  heart.innerHTML = '‚ù§';
  heart.style.left = Math.random() * 100 + '%';
  heart.style.animationDuration = (Math.random() * 
    (CONFIG.timings.floatAnimation[1] - CONFIG.timings.floatAnimation[0]) + 
    CONFIG.timings.floatAnimation[0]) + 's';
  floatingHearts.appendChild(heart);
  
  setTimeout(() => heart.remove(), CONFIG.timings.floatAnimation[1] * 1000);
}

// B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã
showNextMessage();
setInterval(showNextMessage, CONFIG.timings.messageChange);

// T∆∞∆°ng t√°c khi di chu·ªôt
card.addEventListener('mousemove', (e) => {
  if (Math.random() > 0.7) {
    createFloatingHeart();
  }
});

// T·ª± ƒë·ªông t·∫°o tr√°i tim bay ng·∫´u nhi√™n
setInterval(() => {
  if (Math.random() > 0.5) {
    createFloatingHeart();
  }
}, 1000);